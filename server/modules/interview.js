const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, './.env') });
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const axios = require('axios');
const PDFDocument = require('pdfkit');

const app = express();
app.use(bodyParser.json());

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

app.get('/generate-interview-questions', async (req, res) => {
    try {
        console.log("Beginne mit dem Lesen der Dateien...");

        const baseDir = path.join(__dirname, '../Background Knowledge');
        const cvPath = path.join(baseDir, 'CV.html');
        const motivationalLetterPath = path.join(baseDir, 'MV.html');
        const positionPath = path.join(baseDir, 'Position.html');

        const cv = fs.readFileSync(cvPath, 'utf-8').trim();
        const motivationalLetter = fs.readFileSync(motivationalLetterPath, 'utf-8').trim();
        const position = fs.readFileSync(positionPath, 'utf-8').trim();

        console.log("CV erfolgreich geladen:", cv.substring(0, 100));
        console.log("Motivationsschreiben erfolgreich geladen:", motivationalLetter.substring(0, 100));
        console.log("Positionsbeschreibung erfolgreich geladen:", position.substring(0, 100));

        console.log("Sende Anfrage an die OpenAI-API...");

        const messages = [
            {
                role: "system",
                content: "You are a professional assistant. Always respond in English, regardless of the input language."
            },
            {
                role: "user",
                content: `
                    Please generate 10 relevant interview questions in English based on the following input data:

                    CV: ${cv}
                    Motivational Letter: ${motivationalLetter}
                    Target Position: ${position}

                    Important: Provide the questions strictly in English as a simple list, one question per line.
                `
            }
        ];

        console.log("Anfrage-Nachricht an die API:", JSON.stringify(messages, null, 2));

        const response = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            {
                model: 'gpt-3.5-turbo',
                messages: messages,
                max_tokens: 500,
                temperature: 0.7
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log("Vollständige Antwort der OpenAI-API:", JSON.stringify(response.data, null, 2));

        const questions = response.data.choices[0].message.content.trim().split('\n').filter(q => q);

        const htmlQuestions = questions.map((q, index) => `<li>Question ${index + 1}: ${q}</li>`).join('');
        const htmlOutput = `<ul>${htmlQuestions}</ul>`;

        console.log("Generierte HTML-Ausgabe:", htmlOutput);

        res.send(htmlOutput);
    } catch (error) {
        console.error("Fehler:", error.response ? JSON.stringify(error.response.data, null, 2) : error.message);
        res.status(500).send("Ein Fehler ist aufgetreten.");
    }
});

app.get('/download-interview-questions', async (req, res) => {
    try {
        const response = await axios.get('http://localhost:3000/generate-interview-questions');
        const questionsHtml = response.data;

        // Extrahiere die Fragen aus dem HTML
        const questions = questionsHtml.match(/<li>Question \d+: (.*?)<\/li>/g).map(q => q.replace(/<.*?>/g, ''));

        // PDF-Erstellung
        const doc = new PDFDocument({ margin: 50 });
        const pdfPath = path.join(__dirname, 'interview_questions.pdf');
        const writeStream = fs.createWriteStream(pdfPath);

        doc.pipe(writeStream);

        // Add title
        doc.fontSize(20).text('Interview Questions', { align: 'center', underline: true });
        doc.moveDown();

        // Add a header
        doc.fontSize(14).text('Generated Questions:', { underline: true });
        doc.moveDown();

        // Add questions with some styling
        questions.forEach((q, index) => {
            doc.fontSize(12).text(`Question ${index + 1}:`, { continued: true, underline: true });
            doc.fontSize(12).text(` ${q}`);
            doc.moveDown();
        });

        // Add footer
        doc.moveDown();
        doc.fontSize(10).text('Generated by Interview Question Generator', { align: 'center', italic: true });

        doc.end();

        writeStream.on('finish', () => {
            console.log("PDF wurde erfolgreich erstellt:", pdfPath); // Log PDF creation
            res.download(pdfPath, 'interview_questions.pdf', (err) => {
                if (err) {
                    console.error("Fehler beim Herunterladen der PDF:", err);
                    res.status(500).send("Ein Fehler ist aufgetreten.");
                } else {
                    console.log("PDF wurde erfolgreich heruntergeladen."); // Log PDF download
                    // Lösche die PDF-Datei nach dem Download
                    fs.unlinkSync(pdfPath);
                }
            });
        });

    } catch (error) {
        console.error("Fehler:", error.message);
        res.status(500).send("Ein Fehler ist aufgetreten.");
    }
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server läuft auf Port ${PORT}`);
});
